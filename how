[33mcommit cca2ecce6f7554623dbb588f7ddb0711741381a6[m[33m ([m[1;36mHEAD -> [m[1;32mreservation[m[33m)[m
Author: n_kar <karnilanjan4444@gmail.com>
Date:   Sun Jun 18 13:14:43 2023 +0530

    updating

[1mdiff --git a/.vscode/settings.json b/.vscode/settings.json[m
[1mnew file mode 100644[m
[1mindex 0000000..c995aa5[m
[1m--- /dev/null[m
[1m+++ b/.vscode/settings.json[m
[36m@@ -0,0 +1,3 @@[m
[32m+[m[32m{[m
[32m+[m[32m    "java.debug.settings.onBuildFailureProceed": true[m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/reservation/pom.xml b/reservation/pom.xml[m
[1mindex a5d1195..7d68610 100644[m
[1m--- a/reservation/pom.xml[m
[1m+++ b/reservation/pom.xml[m
[36m@@ -15,6 +15,7 @@[m
 	<description>Demo project for Spring Boot</description>[m
 	<properties>[m
 		<java.version>17</java.version>[m
[32m+[m		[32m<spring-cloud.version>2022.0.3</spring-cloud.version>[m
 	</properties>[m
 	<dependencies>[m
 		<dependency>[m
[36m@@ -25,6 +26,10 @@[m
 			<groupId>org.springframework.boot</groupId>[m
 			<artifactId>spring-boot-starter-web</artifactId>[m
 		</dependency>[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.springframework.cloud</groupId>[m
[32m+[m			[32m<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>[m
[32m+[m		[32m</dependency>[m
 [m
 [m
 		<dependency>[m
[36m@@ -55,18 +60,21 @@[m
 			<version>2.0.0</version>[m
 		</dependency>[m
 [m
[31m-<!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-dependencies -->[m
[31m-		<dependency>[m
[31m-			<groupId>org.springframework.cloud</groupId>[m
[31m-			<artifactId>spring-cloud-dependencies</artifactId>[m
[31m-			<version>2022.0.3</version>[m
[31m-			<type>pom</type>[m
[31m-			<scope>import</scope>[m
[31m-		</dependency>[m
 [m
 [m
 [m
 	</dependencies>[m
[32m+[m	[32m<dependencyManagement>[m
[32m+[m		[32m<dependencies>[m
[32m+[m			[32m<dependency>[m
[32m+[m				[32m<groupId>org.springframework.cloud</groupId>[m
[32m+[m				[32m<artifactId>spring-cloud-dependencies</artifactId>[m
[32m+[m				[32m<version>${spring-cloud.version}</version>[m
[32m+[m				[32m<type>pom</type>[m
[32m+[m				[32m<scope>import</scope>[m
[32m+[m			[32m</dependency>[m
[32m+[m		[32m</dependencies>[m
[32m+[m	[32m</dependencyManagement>[m
 [m
 	[m
 [m
[1mdiff --git a/reservation/src/main/java/com/nk/reservation/controller/ReservationController.java b/reservation/src/main/java/com/nk/reservation/controller/ReservationController.java[m
[1mindex ede603e..a4b04f2 100644[m
[1m--- a/reservation/src/main/java/com/nk/reservation/controller/ReservationController.java[m
[1m+++ b/reservation/src/main/java/com/nk/reservation/controller/ReservationController.java[m
[36m@@ -42,8 +42,8 @@[m [mpublic class ReservationController {[m
     }[m
 [m
     @GetMapping("/track/{travelRequestId}")[m
[31m-    public Reservation getReservationByTravelRequestId(@PathVariable int travelRequestId) throws ResourceNotFoundException{[m
[31m-        return reservationServices.getReservationByTravelRequestId(travelRequestId);[m
[32m+[m[32m    public List<Reservation> getReservationByTravelRequestId(@PathVariable int travelRequestId) throws ResourceNotFoundException{[m
[32m+[m[32m        return reservationServices.getReservationsByTravelRequestId(travelRequestId);[m
     }[m
 [m
     @GetMapping("/{reservationid}/download")[m
[1mdiff --git a/reservation/src/main/java/com/nk/reservation/repository/ReservationRepository.java b/reservation/src/main/java/com/nk/reservation/repository/ReservationRepository.java[m
[1mindex 18e18a1..b6b0fbd 100644[m
[1m--- a/reservation/src/main/java/com/nk/reservation/repository/ReservationRepository.java[m
[1m+++ b/reservation/src/main/java/com/nk/reservation/repository/ReservationRepository.java[m
[36m@@ -1,5 +1,7 @@[m
 package com.nk.reservation.repository;[m
 [m
[32m+[m[32mimport java.util.List;[m
[32m+[m
 import org.springframework.data.jpa.repository.JpaRepository;[m
 import org.springframework.data.jpa.repository.Query;[m
 [m
[36m@@ -8,6 +10,6 @@[m [mimport com.nk.reservation.entity.Reservation;[m
 public interface ReservationRepository extends JpaRepository<Reservation, Integer> {[m
     [m
     @Query("select r from Reservation r where r.travelRequestId = ?1")[m
[31m-    Reservation findByTravelRequestId(int travelRequestId);[m
[32m+[m[32m    List<Reservation> findByTravelRequestId(int travelRequestId);[m
     [m
 }[m
\ No newline at end of file[m
[1mdiff --git a/reservation/src/main/java/com/nk/reservation/services/BuisnessLogic.java b/reservation/src/main/java/com/nk/reservation/services/BuisnessLogic.java[m
[1mnew file mode 100644[m
[1mindex 0000000..9b6bd5a[m
[1m--- /dev/null[m
[1m+++ b/reservation/src/main/java/com/nk/reservation/services/BuisnessLogic.java[m
[36m@@ -0,0 +1,56 @@[m
[32m+[m[32mpackage com.nk.reservation.services;[m
[32m+[m
[32m+[m[32mimport java.time.LocalDate;[m
[32m+[m
[32m+[m[32mimport com.nk.reservation.entity.Reservation;[m
[32m+[m[32mimport com.nk.reservation.entity.ReservationTypes;[m
[32m+[m
[32m+[m[32mpublic class BuisnessLogic {[m
[32m+[m[41m    [m
[32m+[m[32m    private boolean checkValidReservation(Reservation reservation){[m
[32m+[m
[32m+[m[32m        String msg="";[m
[32m+[m
[32m+[m[32m        //sample date, have to fetch from travel planner table[m
[32m+[m[32m        LocalDate formdate = LocalDate.of(2024, 6, 15);[m[41m [m
[32m+[m[32m        ReservationTypes reservationType = reservation.getReservationTypeId();[m
[32m+[m
[32m+[m[32m        // Rule a: ReservationDate for a train/bus reservation must be 1 day before the fromdate mentioned in Travel Planner[m
[32m+[m[32m        if (reservationType.getId() == 1 || reservationType.getId() == 2) {[m
[32m+[m[32m            // LocalDate reservationDate = travelPlan.getFromDate().minusDays(1);[m
[32m+[m[32m            if (!formdate.isEqual(reservation.getReservationDate())) {[m
[32m+[m[32m                // return false;[m
[32m+[m[32m                msg+="\ndate is not valid as per rule a, recheck";[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        // Rule b: ReservationDate for hotel must be same as the from date in travel plan[m
[32m+[m[32m        if (reservationType.getId() == 3) {[m
[32m+[m[32m            if (!formdate.isEqual(reservation.getReservationDate())) {[m
[32m+[m[32m                // return false;[m
[32m+[m[32m                msg+="\ndate is not valid as per rule b, recheck";[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        // Rule c: There must be exactly 3 reservations per travel - one for flight/bus/train, one for hotel, and one for cab travel to hotel from flight/bus/train[m
[32m+[m[32m        // int reservationCount = getReservationCount(travelPlan);[m
[32m+[m[32m        int reservationCount = 3;[m
[32m+[m[32m        if (reservationCount >= 3) {[m
[32m+[m[32m            // return false;[m
[32m+[m[32m            msg+="\nThere must be 3 reservations per travel";[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        // Rule d: The amount of all 3 reservations must not exceed 70% of the allocated budget[m
[32m+[m[32m        // double totalReservationAmount = reservation.getAmount() + getReservationAmount(travelPlan);[m
[32m+[m[32m        // double maxAllowedAmount = allocatedBudget * 0.7;[m
[32m+[m[32m        // if (totalReservationAmount > maxAllowedAmount) {[m
[32m+[m[32m        //     return false;[m
[32m+[m[32m        // }[m
[32m+[m
[32m+[m[32m        if(msg!=""){[m
[32m+[m[32m            throw new IllegalArgumentException(msg);[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        return true;[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/reservation/src/main/java/com/nk/reservation/services/IReservationServices.java b/reservation/src/main/java/com/nk/reservation/services/IReservation